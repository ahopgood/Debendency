// Code generated by counterfeiter. DO NOT EDIT.
package internal

import (
	"com/alexander/debendency/pkg/commands"
	"sync"
)

type FakeDpkgQuery struct {
	IsInstalledStub        func(string) bool
	isInstalledMutex       sync.RWMutex
	isInstalledArgsForCall []struct {
		arg1 string
	}
	isInstalledReturns struct {
		result1 bool
	}
	isInstalledReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDpkgQuery) IsInstalled(arg1 string) bool {
	fake.isInstalledMutex.Lock()
	ret, specificReturn := fake.isInstalledReturnsOnCall[len(fake.isInstalledArgsForCall)]
	fake.isInstalledArgsForCall = append(fake.isInstalledArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsInstalledStub
	fakeReturns := fake.isInstalledReturns
	fake.recordInvocation("IsInstalled", []interface{}{arg1})
	fake.isInstalledMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDpkgQuery) IsInstalledCallCount() int {
	fake.isInstalledMutex.RLock()
	defer fake.isInstalledMutex.RUnlock()
	return len(fake.isInstalledArgsForCall)
}

func (fake *FakeDpkgQuery) IsInstalledCalls(stub func(string) bool) {
	fake.isInstalledMutex.Lock()
	defer fake.isInstalledMutex.Unlock()
	fake.IsInstalledStub = stub
}

func (fake *FakeDpkgQuery) IsInstalledArgsForCall(i int) string {
	fake.isInstalledMutex.RLock()
	defer fake.isInstalledMutex.RUnlock()
	argsForCall := fake.isInstalledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDpkgQuery) IsInstalledReturns(result1 bool) {
	fake.isInstalledMutex.Lock()
	defer fake.isInstalledMutex.Unlock()
	fake.IsInstalledStub = nil
	fake.isInstalledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDpkgQuery) IsInstalledReturnsOnCall(i int, result1 bool) {
	fake.isInstalledMutex.Lock()
	defer fake.isInstalledMutex.Unlock()
	fake.IsInstalledStub = nil
	if fake.isInstalledReturnsOnCall == nil {
		fake.isInstalledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isInstalledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDpkgQuery) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isInstalledMutex.RLock()
	defer fake.isInstalledMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDpkgQuery) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.DpkgQuery = new(FakeDpkgQuery)
